<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</title>
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css" rel="stylesheet">
  <style>
    body {
      padding: 30px;
    }
    .container {
      max-width: 600px;
    }
    .row .input-field {
      margin-bottom: 0;
    }
    .result {
      padding: 20px;
      margin-top: 20px;
    }
  </style>
</head>
<body>
  <div class="container">
    <h4 class="center-align">–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</h4>
    <div class="row">
      <div class="input-field col s6">
        <input id="weight" type="number" min="1">
        <label for="weight">–¢–µ—Å—Ç–æ–≤—ã–π –≤–µ—Å (–∫–≥)</label>
      </div>
      <div class="input-field col s6">
        <input id="reps" type="number" min="1">
        <label for="reps">–ú–∞–∫—Å. –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π</label>
      </div>
    </div>
    <div class="row">
      <div class="input-field col s6">
        <input id="bodyweight" type="number" min="30">
        <label for="bodyweight">–í–µ—Å —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ (–∫–≥)</label>
      </div>
      <div class="input-field col s6">
        <input id="height" type="number" min="100">
        <label for="height">–†–æ—Å—Ç (—Å–º)</label>
      </div>
    </div>
    <div class="row">
      <div class="input-field col s12">
        <select id="bodytype">
          <option value="lean">üßç –•—É–¥–æ—â–∞–≤—ã–π (–Ω–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞ –∏ –º—ã—à—Ü)</option>
          <option value="average" selected>‚öñÔ∏è –°—Ä–µ–¥–Ω–∏–π (–Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å)</option>
          <option value="fat">üç© –õ–∏—à–Ω–∏–π –∂–∏—Ä</option>
          <option value="muscular">üí™ –ú—É—Å–∫—É–ª–∏—Å—Ç—ã–π</option>
        </select>
        <label>–¢–∏–ø —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏—è</label>
      </div>
    </div>
    <div class="row">
      <div class="input-field col s12">
        <select id="goal">
          <option value="power">üí• –í–∑—Ä—ã–≤–Ω–∞—è —Å–∏–ª–∞</option>
          <option value="cut">üî• –°—É—à–∫–∞ / —Ä–µ–ª—å–µ—Ñ</option>
          <option value="hypertrophy">üí™ –ú—ã—à–µ—á–Ω—ã–π —Ä–æ—Å—Ç</option>
        </select>
        <label>–¶–µ–ª—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</label>
      </div>
    </div>
    <div class="center-align">
      <button class="btn waves-effect waves-light" onclick="calculatePlan()">–†–∞—Å—Å—á–∏—Ç–∞—Ç—å
        <i class="material-icons right">calculate</i>
      </button>
    </div>
    <div class="card blue-grey lighten-5 result" id="result" style="display:none;"></div>
  </div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      var elems = document.querySelectorAll('select');
      M.FormSelect.init(elems);
    });

    function calculateOneRepMax(weight, reps) {
      return weight * (1 + 0.0333 * reps);
    }

    function getIMT(bodyweight, height) {
      const h = height / 100;
      return bodyweight / (h * h);
    }

    function getRestAdjustment(bodytype) {
      switch (bodytype) {
        case 'lean': return 1.2;
        case 'average': return 1.0;
        case 'fat': return 1.4;
        case 'muscular': return 0.85;
      }
    }

    function getWeightMultiplier(bodytype) {
      switch (bodytype) {
        case 'lean': return 0.95;
        case 'average': return 1.0;
        case 'fat': return 0.9;
        case 'muscular': return 1.05;
      }
    }

    function estimateOptimalRest(goal, sets, restFactor) {
      let baseMin, baseMax;
      if (goal === 'power') {
        baseMin = Math.max(2, sets * 0.8);
        baseMax = Math.min(5, sets * 1.2);
      } else if (goal === 'cut') {
        baseMin = Math.max(0.3, sets * 0.4);
        baseMax = Math.min(1.0, sets * 0.6);
      } else if (goal === 'hypertrophy') {
        baseMin = Math.max(0.6, sets * 0.7);
        baseMax = Math.min(1.5, sets * 0.9);
      }
      return `${(baseMin * restFactor).toFixed(1)}‚Äì${(baseMax * restFactor).toFixed(1)} –º–∏–Ω—É—Ç`;
    }

    function calculatePlan() {
      const weight = parseFloat(document.getElementById('weight').value);
      const reps = parseInt(document.getElementById('reps').value);
      const bodyweight = parseFloat(document.getElementById('bodyweight').value);
      const height = parseInt(document.getElementById('height').value);
      const goal = document.getElementById('goal').value;
      const bodytype = document.getElementById('bodytype').value;

      if (
        isNaN(weight) || isNaN(reps) || isNaN(bodyweight) || isNaN(height) ||
        weight < 1 || reps < 1 || bodyweight < 30 || height < 100
      ) {
        M.toast({ html: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ' });
        return;
      }

      const oneRepMax = calculateOneRepMax(weight, reps);
      const weightMultiplier = getWeightMultiplier(bodytype);
      const restFactor = getRestAdjustment(bodytype);

      let workingRange, repRange, sets;

      if (goal === 'power') {
        workingRange = [0.85, 0.95];
        repRange = [1, 5];
        sets = 5;
      } else if (goal === 'cut') {
        workingRange = [0.5, 0.7];
        repRange = [12, 20];
        sets = 3;
      } else if (goal === 'hypertrophy') {
        workingRange = [0.65, 0.8];
        repRange = [6, 12];
        sets = 4;
      }

      const minWork = Math.round(oneRepMax * workingRange[0] * weightMultiplier);
      const maxWork = Math.round(oneRepMax * workingRange[1] * weightMultiplier);
      const rest = estimateOptimalRest(goal, sets, restFactor);

      const resultHTML = `
        <h5>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã</h5>
        <p><strong>–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –º–∞–∫—Å–∏–º—É–º (1–ü–ú):</strong> ${oneRepMax.toFixed(1)} –∫–≥</p>
        <p><strong>–†–∞–±–æ—á–∏–π –≤–µ—Å (—Å —É—á—ë—Ç–æ–º —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏—è):</strong> ${minWork}‚Äì${maxWork} –∫–≥</p>
        <p><strong>–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:</strong> ${repRange[0]}‚Äì${repRange[1]}</p>
        <p><strong>–ü–æ–¥—Ö–æ–¥—ã:</strong> ${sets}</p>
        <p><strong>–û—Ç–¥—ã—Ö –º–µ–∂–¥—É –ø–æ–¥—Ö–æ–¥–∞–º–∏:</strong> ${rest}</p>
      `;

      const resultBlock = document.getElementById('result');
      resultBlock.innerHTML = resultHTML;
      resultBlock.style.display = 'block';
    }
  </script>
</body>
</html>
